gramatica -> programa '.'

programa  -> cabecalho corpo

cabecalho ->  titulo declaracao_funcoes declaracoes_variaveis 

titulo    -> PROGRAM ID ';'

declaracao_funcoes -> FUNCTION funcoes 
                    | ε

funcoes -> funcao 
         | funcao funcoes 

funcao -> ID '(' parametros ')' ':' tipo ';' bloco_funcao ';'

bloco_funcao -> declaracoes_variaveis corpo


parametros -> lista_id ':' tipo    ( Mudar isto para usar declaracoes -> MAS NAO DA NAO SEI PORQ??)
            | lista_id ':' tipo ';' parametros
            | ε


declaracoes_variaveis -> VAR declaracoes
                      | ε

declaracoes      -> declaracao
                 | declaracao declaracoes 

declaracao       -> lista_id ':' tipo ';'

lista_id         -> ID
                 | lista_id ',' ID

tipo             -> INTEGER
                 | REAL
                 | BOOLEAN
                 | CHAR
                 | ARRAY '[' NUMBER RANGE NUMBER ']' OF tipo

corpo            -> BEGIN lista_instrucoes END

lista_instrucoes -> instrucao
                 | lista_instrucoes ';' instrucao

instrucao        -> atribuicao
                 | leitura
                 | escrita
                 | if_statement
                 | while_statement
                 | for_statement
                 | bloco
                 | ε ??


atribuicao       -> ID ASSIGN expressao
                 | ID '[' expressao ']' ASSIGN expressao

leitura          -> READ '(' expressao_simples ')' 
                 | READLN '(' expressao_simples ')' 

escrita          -> WRITE '(' lista_expressao ')'
                 |  WRITELN '(' lista_expressao ')'

if               -> IF expressao THEN instrucao ELSE instrucao
                 |  IF expressao THEN instrucao

while            -> WHILE expressao DO instrucao

for              -> FOR ID ASSIGN expressao TO expressao DO instrucao
                  | FOR ID ASSIGN expressao DOWNTO expressao DO instrucao

bloco            ->  BEGIN lista_instrucoes END



lista_expressao  -> expressao
                 | lista_expressao ',' expressao

expressao        -> expressao_simples
                 | expressao_simples operador_relacional expressao_simples

expressao_simples -> termo
                  | expressao_simples '+' termo (NAO ESTA MAL ??)
                  | expressao_simples '-' termo

termo            -> fator
                 | termo '*' fator (NAO ESTA MAL ??)  ==>     termo -> fator termo2
                 | termo '/' fator                           termo2 -> '*' termo
                                                             termo2 -> '/' termo
fator            -> NUMBER
                 | STRING_LITERAL
                 | ID                            // Nao da ASNEIRA 3 expressoes começar por ID?
                 | ID '[' expressao ']'          // Acesso a array
                 | ID '(' expressao ')'          // Funcoes (ex: for i := "length(bin)")
                 | TRUE
                 | FALSE
                 | '(' expressao ')'

operador_relacional -> '=' | '<>' | '<' | '<=' | '>' | '>='
